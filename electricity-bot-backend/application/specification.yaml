# to see the specification at https://editor.swagger.io, copy the code below and paste it into the editor
openapi: 3.0.0
info:
  title: Electricity Bot API
  version: 1.0.0
  description: Description of how the server communicates with a Raspberry Pi and a client (app and website)

servers:
  - url: http://localhost:5000

components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string

    CreateUserRequest:
      type: object
      required: [email, device_id, first_name, last_name]
      properties:
        email:
          type: string
          format: email
        device_id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
      example:
        email: "anna@example.com"
        device_id: "128e4560-e80b-1203-a456-426614174000"
        first_name: "Anna"
        last_name: "Ivanova"

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
      example:
        first_name: "AnnaUpdated"

    Device:
      type: object
      required: [device_id, last_seen]
      properties:
        device_id:
          type: string
          format: uuid
        last_seen:
          type: string
          format: date-time
      example:
        device_id: "128e4560-e80b-1203-a456-426614174000"
        last_seen: "2025-06-11T20:00:00Z"

    Measurement:
      type: object
      required: [device_id, outgate_status, timestamp]
      properties:
        device_id:
          type: string
          format: uuid
        outgate_status:
          type: boolean
        timestamp:
          type: string
          format: date-time
          description: ISO-8601 UTC timestamp
      example:
        device_id: "128e4560-e80b-1203-a456-426614174000"
        outgate_status: true
        timestamp: "2025-06-11T20:17:00Z"

    MeasurementStatistics:
      type: object
      properties:
        device_id:
          type: string
          format: uuid
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
        events:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              outgate_status:
                type: boolean

paths:
  /api/users:
    post:
      summary: Create a new user and associate a device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User and device created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    format: uuid
                  device_id:
                    type: string
                    format: uuid
              example:
                user_id: "d78c3244-2376-4321-8bee-26c460f5432b"
                device_id: "128e4560-e80b-1203-a456-426614174000"
        '400': { description: Missing required field }
        '422': { description: Validation failed }
        '500': { description: Unexpected server error }

    get:
      summary: List users with optional filtering
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          example: 1
        - in: query
          name: per_page
          schema:
            type: integer
            minimum: 1
          example: 20
        - in: query
          name: first_name
          schema:
            type: string
          example: Anna
        - in: query
          name: last_name
          schema:
            type: string
          example: Ivanova
      responses:
        '200':
          description: Paginated user list
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  per_page:
                    type: integer
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
              example:
                page: 1
                per_page: 20
                users:
                  - user_id: "d78c3244-2376-4321-8bee-26c460f5432b"
                    email: "anna@example.com"
                    first_name: "Anna"
                    last_name: "Ivanova"
        '400': { description: Invalid pagination parameters }
        '500': { description: Failed to fetch users }

  /api/users/{user_id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400': { description: Invalid UUID format }
        '404': { description: User not found }
        '500': { description: Failed to fetch user }

    patch:
      summary: Update user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200': { description: User updated }
        '400': { description: Invalid UUID or update failed }
        '404': { description: User not found }
        '422': { description: Validation error }

    delete:
      summary: Delete user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200': { description: User deleted }
        '400': { description: Invalid UUID format or delete failed }
        '404': { description: User not found }

  /api/devices:
    post:
      summary: Create a new device (optionally provide ID & last_seen)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '201':
          description: Device created
          content:
            application/json:
              schema:
                type: object
                properties:
                  device_id:
                    type: string
                    format: uuid
              example:
                device_id: "128e4560-e80b-1203-a456-426614174000"
        '400': { description: Missing or invalid field }
        '422': { description: Validation failed }
        '500': { description: Failed to create device }

    get:
      summary: List devices (paginated)
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          example: 1
        - in: query
          name: per_page
          schema:
            type: integer
            minimum: 1
          example: 3
      responses:
        '200':
          description: Device list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
              example:
                - device_id: "128e4560-e80b-1203-a456-426614174000"
                  last_seen: "2025-06-11T20:00:00Z"
        '400': { description: Invalid pagination parameters }
        '500': { description: Failed to fetch devices }

  /api/devices/{device_id}:
    get:
      summary: Get a device by ID
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Device details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404': { description: Device not found }
        '500': { description: Failed to fetch device }

    delete:
      summary: Delete a device by ID
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200': { description: Device deleted }
        '404': { description: Device not found }
        '500': { description: Failed to delete device }

  /api/measurements:
    post:
      summary: Submit a new measurement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Measurement'
      responses:
        '201':
          description: Measurement saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                example:
                  message: "Measurement saved"
                  timestamp: "2025-06-11T20:17:00Z"
        '400': { description: Missing or invalid field }
        '404': { description: Device not registered }
        '410':
          description: Device removed; must reboot
          content:
            application/json:
              example:
                error: "Device removed from system"
                action: "reboot"
        '422': { description: Validation failed }
        '500': { description: Unexpected server error }

  /api/statistics/day/{device_id}:
    get:
      summary: Get power events for the last 24 hours
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Events returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementStatistics'
        '404': { description: Device not registered }
        '422': { description: Invalid device ID }
        '500': { description: Could not retrieve statistics }

  /api/statistics/week/{device_id}:
    get:
      summary: Get power events for the last 7 days
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Events returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementStatistics'
        '404': { description: Device not registered }
        '422': { description: Invalid device ID }
        '500': { description: Could not retrieve statistics }